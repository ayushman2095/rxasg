{"version":3,"sources":["component/topheader.js","Api.js","component/ListView.js","component/gridView.js","component/search.js","component/list.js","App.js","serviceWorker.js","index.js"],"names":["TopHeader","className","handleResponse","response","a","json","status","text","error","Error","handleError","console","ListView","props","log","undefined","_rxList","articles","map","_list","index","key","src","urlToImage","author","Date","publishedAt","toLocaleDateString","timeZone","description","content","GridView","Search","upData","Array","type","id","onKeyPress","event","target","value","onSearch","e","search","title","List","useState","data","setData","rxList","setList","_ListView","_gridView","View","setView","useEffect","fetch","then","catch","dataSet","onClick","newList","sort","b","dateA","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.3794a155.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../css/topheader.css\";\r\nfunction TopHeader() {\r\n  return <div className=\"back\"></div>;\r\n}\r\nexport default TopHeader;\r\n","export async function handleResponse(response) {\r\n  if (response) return response.json();\r\n  if (response.status === 400) {\r\n    // So, a server-side validation error occurred.\r\n    // Server side validation returns a string error message, so parse as text instead of json.\r\n    const error = await response.text();\r\n    throw new Error(error);\r\n  }\r\n  throw new Error(\"Network response was not ok.\");\r\n}\r\n\r\n// In a real app, would likely call an error logging service.\r\nexport function handleError(error) {\r\n  // eslint-disable-next-line no-console\r\n  console.error(\"API call failed. \" + error);\r\n  throw error;\r\n}\r\nexport function getRx() {\r\n  return fetch(\r\n    \"https://newsapi.org/v2/everything?q=reactjs&apiKey=363d26dd3d664d199ca63adc371e22aa&pageSize=10&page=1&sortBy=publishedA\"\r\n  )\r\n    .then(handleResponse)\r\n    .catch(handleError);\r\n}\r\n","import React from \"react\";\r\nimport \"../css/ListView.css\";\r\n\r\nfunction ListView(props) {\r\n  console.log(props);\r\n  return (\r\n    <div className=\"j\">\r\n      <div className=\"column1\">\r\n        {props._rxList.articles !== undefined ? (\r\n          props._rxList.articles.map((_list, index) => {\r\n            return (\r\n              <div className=\"row1\" key={index}>\r\n                <div className=\"img_box\">\r\n                  <img src={_list.urlToImage}></img>\r\n                </div>\r\n\r\n                <div className=\"list_img\">\r\n                  <p className=\"_Right\">\r\n                    <b>{_list.author}</b>\r\n                    <span className=\"_left\">\r\n                      {new Date(_list.publishedAt).toLocaleDateString(\"en-GB\", {\r\n                        timeZone: \"UTC\"\r\n                      })}\r\n                    </span>\r\n                  </p>\r\n                  <div className=\"txt\">{_list.description}</div>\r\n                  <div className=\"txt\">\r\n                    <i>{_list.content}</i>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            );\r\n          })\r\n        ) : (\r\n          <h3>Loading data....</h3>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default ListView;\r\n","import React from \"react\";\r\nimport \"../css/gridView.css\";\r\n\r\nfunction GridView(props) {\r\n  return (\r\n    <div className=\"box\">\r\n      <div className=\"row\">\r\n        {props._rxList.articles !== undefined ? (\r\n          props._rxList.articles.map((_list, index) => {\r\n            return (\r\n              <div className=\"column\" key={index}>\r\n                <img src={_list.urlToImage}></img>\r\n                <p>\r\n                  <b>{_list.author}</b>\r\n                </p>\r\n                <p>\r\n                  {new Date(_list.publishedAt).toLocaleDateString(\"en-GB\", {\r\n                    timeZone: \"UTC\"\r\n                  })}\r\n                </p>\r\n                <p className=\"cnt\">\r\n                  <i>{_list.content}</i>\r\n                </p>\r\n              </div>\r\n            );\r\n          })\r\n        ) : (\r\n          <h3>Loading data....</h3>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default GridView;\r\n","import React from \"react\";\r\nimport \"../css/search.css\";\r\n\r\nfunction Search(props) {\r\n  let upData = new Array();\r\n  const Search = event => {\r\n    if (event.key === \"Enter\") {\r\n      if (event.target.value === \"\") {\r\n        props.onSearch(props._rxList.articles);\r\n        return;\r\n      }\r\n      props._rxList.articles.map(e => {\r\n        if (e.author != null)\r\n          if (e.author.search(event.target.value) !== -1) {\r\n            upData = [...upData, e];\r\n          }\r\n        if (e.title != null)\r\n          if (e.title.search(event.target.value) !== -1) {\r\n            upData = [...upData, e];\r\n          }\r\n        if (e.description != null)\r\n          if (e.description.search(event.target.value) !== -1) {\r\n            upData = [...upData, e];\r\n          }\r\n        if (e.content != null)\r\n          if (e.content.search(event.target.value) !== -1) {\r\n            upData = [...upData, e];\r\n          }\r\n      });\r\n      props.onSearch(upData);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"searchbox\">\r\n        <span className=\"srcBtn\">\r\n          <i className=\"fa fa-search fa-2x\"></i>\r\n        </span>\r\n        <input type=\"search\" className=\"t\" id=\"e\" onKeyPress={Search}></input>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Search;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { getRx } from \"../Api\";\r\nimport \"../css/list.css\";\r\nimport ListView from \"./ListView\";\r\nimport GridView from \"./gridView\";\r\nimport Search from \"./search\";\r\n\r\nfunction List() {\r\n  const [data, setData] = useState({});\r\n  const [rxList, setList] = useState({});\r\n  const [View, setView] = useState({\r\n    _ListView: true,\r\n    _gridView: false\r\n  });\r\n  useEffect(() => {\r\n    getRx().then(_list => {\r\n      setList(_list);\r\n      setData(_list);\r\n    });\r\n  }, []);\r\n\r\n  function openList() {\r\n    setView({\r\n      _ListView: true,\r\n      _gridView: false\r\n    });\r\n  }\r\n  function SortAsc() {\r\n    let newList = rxList.articles.sort((a, b) => {\r\n      var dateA = new Date(a.publishedAt);\r\n      var dateB = new Date(b.publishedAt);\r\n      return dateA - dateB;\r\n    });\r\n\r\n    setList({ articles: newList });\r\n  }\r\n  function SortDec() {\r\n    let newList = rxList.articles.sort((a, b) => {\r\n      var dateA = new Date(a.publishedAt);\r\n      var dateB = new Date(b.publishedAt);\r\n      return dateB - dateA;\r\n    });\r\n\r\n    setList({ articles: newList });\r\n  }\r\n  function openGrid() {\r\n    setView({\r\n      _ListView: false,\r\n      _gridView: true\r\n    });\r\n  }\r\n  function srch(dataSet) {\r\n    console.log(\"Hi\", dataSet);\r\n    setData({ articles: dataSet });\r\n  }\r\n  return (\r\n    <>\r\n      <Search onSearch={srch} _rxList={rxList}></Search>\r\n      <div className=\"box\">\r\n        <div className=\"srtBtn\">\r\n          <i className=\"fas fa-list\" onClick={openList}></i>\r\n          <i className=\"fas fa-th\" onClick={openGrid}></i>\r\n          <i className=\"fas fa-sort-amount-down\" onClick={SortAsc}></i>\r\n          <i className=\"fas fa-sort-amount-up\" onClick={SortDec}></i>\r\n        </div>\r\n        {View._gridView && <GridView _rxList={data}></GridView>}\r\n        {View._ListView && <ListView _rxList={data}></ListView>}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\nexport default List;\r\n","import React from \"react\";\nimport TopHeader from \"./component/topheader\";\nimport List from \"./component/list\";\n\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nfunction App() {\n  return (\n    <>\n      <TopHeader></TopHeader>\n      <List></List>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}